// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: privacy.proto

package followservice

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Privacy_Create_FullMethodName = "/Privacy/Create"
)

// PrivacyClient is the client API for Privacy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrivacyClient interface {
	Create(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type privacyClient struct {
	cc grpc.ClientConnInterface
}

func NewPrivacyClient(cc grpc.ClientConnInterface) PrivacyClient {
	return &privacyClient{cc}
}

func (c *privacyClient) Create(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Privacy_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrivacyServer is the server API for Privacy service.
// All implementations must embed UnimplementedPrivacyServer
// for forward compatibility
type PrivacyServer interface {
	Create(context.Context, *FollowRequest) (*empty.Empty, error)
	mustEmbedUnimplementedPrivacyServer()
}

// UnimplementedPrivacyServer must be embedded to have forward compatible implementations.
type UnimplementedPrivacyServer struct {
}

func (UnimplementedPrivacyServer) Create(context.Context, *FollowRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPrivacyServer) mustEmbedUnimplementedPrivacyServer() {}

// UnsafePrivacyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrivacyServer will
// result in compilation errors.
type UnsafePrivacyServer interface {
	mustEmbedUnimplementedPrivacyServer()
}

func RegisterPrivacyServer(s grpc.ServiceRegistrar, srv PrivacyServer) {
	s.RegisterService(&Privacy_ServiceDesc, srv)
}

func _Privacy_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivacyServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Privacy_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivacyServer).Create(ctx, req.(*FollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Privacy_ServiceDesc is the grpc.ServiceDesc for Privacy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Privacy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Privacy",
	HandlerType: (*PrivacyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Privacy_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "privacy.proto",
}
