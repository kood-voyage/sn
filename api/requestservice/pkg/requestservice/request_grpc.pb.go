// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: request.proto

package requestservice

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Request_Create_FullMethodName            = "/Request/Create"
	Request_Delete_FullMethodName            = "/Request/Delete"
	Request_Get_FullMethodName               = "/Request/Get"
	Request_GetNotifications_FullMethodName  = "/Request/GetNotifications"
	Request_GetInvitations_FullMethodName    = "/Request/GetInvitations"
	Request_GetFollowrequests_FullMethodName = "/Request/GetFollowrequests"
)

// RequestClient is the client API for Request service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RequestClient interface {
	Create(ctx context.Context, in *RequestReq, opts ...grpc.CallOption) (*RequestReq, error)
	Delete(ctx context.Context, in *RequestReq, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *RequestReq, opts ...grpc.CallOption) (*RequestReq, error)
	GetNotifications(ctx context.Context, in *RequestUserId, opts ...grpc.CallOption) (*RequestReqs, error)
	GetInvitations(ctx context.Context, in *RequestUserId, opts ...grpc.CallOption) (*RequestReqs, error)
	GetFollowrequests(ctx context.Context, in *RequestUserId, opts ...grpc.CallOption) (*RequestReqs, error)
}

type requestClient struct {
	cc grpc.ClientConnInterface
}

func NewRequestClient(cc grpc.ClientConnInterface) RequestClient {
	return &requestClient{cc}
}

func (c *requestClient) Create(ctx context.Context, in *RequestReq, opts ...grpc.CallOption) (*RequestReq, error) {
	out := new(RequestReq)
	err := c.cc.Invoke(ctx, Request_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestClient) Delete(ctx context.Context, in *RequestReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Request_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestClient) Get(ctx context.Context, in *RequestReq, opts ...grpc.CallOption) (*RequestReq, error) {
	out := new(RequestReq)
	err := c.cc.Invoke(ctx, Request_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestClient) GetNotifications(ctx context.Context, in *RequestUserId, opts ...grpc.CallOption) (*RequestReqs, error) {
	out := new(RequestReqs)
	err := c.cc.Invoke(ctx, Request_GetNotifications_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestClient) GetInvitations(ctx context.Context, in *RequestUserId, opts ...grpc.CallOption) (*RequestReqs, error) {
	out := new(RequestReqs)
	err := c.cc.Invoke(ctx, Request_GetInvitations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestClient) GetFollowrequests(ctx context.Context, in *RequestUserId, opts ...grpc.CallOption) (*RequestReqs, error) {
	out := new(RequestReqs)
	err := c.cc.Invoke(ctx, Request_GetFollowrequests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RequestServer is the server API for Request service.
// All implementations must embed UnimplementedRequestServer
// for forward compatibility
type RequestServer interface {
	Create(context.Context, *RequestReq) (*RequestReq, error)
	Delete(context.Context, *RequestReq) (*empty.Empty, error)
	Get(context.Context, *RequestReq) (*RequestReq, error)
	GetNotifications(context.Context, *RequestUserId) (*RequestReqs, error)
	GetInvitations(context.Context, *RequestUserId) (*RequestReqs, error)
	GetFollowrequests(context.Context, *RequestUserId) (*RequestReqs, error)
	mustEmbedUnimplementedRequestServer()
}

// UnimplementedRequestServer must be embedded to have forward compatible implementations.
type UnimplementedRequestServer struct {
}

func (UnimplementedRequestServer) Create(context.Context, *RequestReq) (*RequestReq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRequestServer) Delete(context.Context, *RequestReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRequestServer) Get(context.Context, *RequestReq) (*RequestReq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRequestServer) GetNotifications(context.Context, *RequestUserId) (*RequestReqs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifications not implemented")
}
func (UnimplementedRequestServer) GetInvitations(context.Context, *RequestUserId) (*RequestReqs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvitations not implemented")
}
func (UnimplementedRequestServer) GetFollowrequests(context.Context, *RequestUserId) (*RequestReqs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowrequests not implemented")
}
func (UnimplementedRequestServer) mustEmbedUnimplementedRequestServer() {}

// UnsafeRequestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RequestServer will
// result in compilation errors.
type UnsafeRequestServer interface {
	mustEmbedUnimplementedRequestServer()
}

func RegisterRequestServer(s grpc.ServiceRegistrar, srv RequestServer) {
	s.RegisterService(&Request_ServiceDesc, srv)
}

func _Request_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Request_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestServer).Create(ctx, req.(*RequestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Request_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Request_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestServer).Delete(ctx, req.(*RequestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Request_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Request_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestServer).Get(ctx, req.(*RequestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Request_GetNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestServer).GetNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Request_GetNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestServer).GetNotifications(ctx, req.(*RequestUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Request_GetInvitations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestServer).GetInvitations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Request_GetInvitations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestServer).GetInvitations(ctx, req.(*RequestUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Request_GetFollowrequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestServer).GetFollowrequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Request_GetFollowrequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestServer).GetFollowrequests(ctx, req.(*RequestUserId))
	}
	return interceptor(ctx, in, info, handler)
}

// Request_ServiceDesc is the grpc.ServiceDesc for Request service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Request_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Request",
	HandlerType: (*RequestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Request_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Request_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Request_Get_Handler,
		},
		{
			MethodName: "GetNotifications",
			Handler:    _Request_GetNotifications_Handler,
		},
		{
			MethodName: "GetInvitations",
			Handler:    _Request_GetInvitations_Handler,
		},
		{
			MethodName: "GetFollowrequests",
			Handler:    _Request_GetFollowrequests_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "request.proto",
}
